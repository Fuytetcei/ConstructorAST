
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Apr 03 16:19:41 CEST 2019
//----------------------------------------------------

package ascendente.asint;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import ascendente.alex.AnalizadorLexicoTiny;
import ascendente.alex.UnidadLexica;
import ascendente.errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Apr 03 16:19:41 CEST 2019
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\004\000\002\005\003" +
    "\000\002\005\003\000\002\006\005\000\002\006\003\000" +
    "\002\007\005\000\002\010\004\000\002\010\004\000\002" +
    "\010\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\003\000\002\015\005\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\017\004\000\002\017\004\000\002\017\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\006\007\005\010\004\001\002\000\004\006" +
    "\ufffb\001\002\000\004\006\ufffc\001\002\000\004\006\077" +
    "\001\002\000\004\002\076\001\002\000\004\004\014\001" +
    "\002\000\006\004\ufffe\005\012\001\002\000\006\007\005" +
    "\010\004\001\002\000\004\004\uffff\001\002\000\004\006" +
    "\016\001\002\000\004\002\001\001\002\000\004\015\022" +
    "\001\002\000\006\002\ufff9\005\020\001\002\000\004\006" +
    "\016\001\002\000\004\002\ufffa\001\002\000\022\006\026" +
    "\011\030\012\032\016\036\017\034\020\024\023\027\033" +
    "\031\001\002\000\030\002\ufff0\005\ufff0\021\ufff0\022\ufff0" +
    "\024\ufff0\025\071\026\074\027\072\030\073\031\067\032" +
    "\066\001\002\000\020\006\026\011\030\012\032\016\044" +
    "\017\034\023\027\033\031\001\002\000\040\002\uffed\005" +
    "\uffed\013\057\014\055\016\060\017\056\021\uffed\022\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\001\002\000\040\002\uffe8\005\uffe8\013\uffe8\014\uffe8" +
    "\016\uffe8\017\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\001\002\000\022" +
    "\006\026\011\030\012\032\016\036\017\034\020\024\023" +
    "\027\033\031\001\002\000\040\002\uffe7\005\uffe7\013\uffe7" +
    "\014\uffe7\016\uffe7\017\uffe7\021\uffe7\022\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\001\002" +
    "\000\040\002\uffe2\005\uffe2\013\uffe2\014\uffe2\016\uffe2\017" +
    "\uffe2\021\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\001\002\000\040\002\uffe6\005" +
    "\uffe6\013\uffe6\014\uffe6\016\uffe6\017\uffe6\021\uffe6\022\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\001\002\000\040\002\uffe5\005\uffe5\013\uffe5\014\uffe5" +
    "\016\uffe5\017\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\001\002\000\004" +
    "\033\052\001\002\000\006\002\ufff8\005\ufff8\001\002\000" +
    "\022\006\026\011\030\012\032\016\036\017\034\020\024" +
    "\023\027\033\050\001\002\000\014\002\ufff5\005\ufff5\021" +
    "\042\022\043\024\ufff5\001\002\000\040\002\uffea\005\uffea" +
    "\013\uffea\014\uffea\016\uffea\017\uffea\021\uffea\022\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\001\002\000\014\002\ufff2\005\ufff2\021\ufff2\022\ufff2\024" +
    "\ufff2\001\002\000\020\006\026\011\030\012\032\016\044" +
    "\017\034\023\027\033\031\001\002\000\020\006\026\011" +
    "\030\012\032\016\044\017\034\023\027\033\031\001\002" +
    "\000\004\033\046\001\002\000\014\002\ufff3\005\ufff3\021" +
    "\ufff3\022\ufff3\024\ufff3\001\002\000\040\002\uffe3\005\uffe3" +
    "\013\uffe3\014\uffe3\016\uffe3\017\uffe3\021\uffe3\022\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\001\002\000\014\002\ufff4\005\ufff4\021\ufff4\022\ufff4\024" +
    "\ufff4\001\002\000\040\002\uffe3\005\uffe3\013\uffe3\014\uffe3" +
    "\016\uffe3\017\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\001\002\000\010" +
    "\002\ufff7\005\ufff7\024\ufff7\001\002\000\040\002\uffe4\005" +
    "\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\001\002\000\004\024\054\001\002\000\040\002\uffe9" +
    "\005\uffe9\013\uffe9\014\uffe9\016\uffe9\017\uffe9\021\uffe9\022" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\001\002\000\020\006\026\011\030\012\032\016" +
    "\044\017\034\023\027\033\031\001\002\000\020\006\026" +
    "\011\030\012\032\016\044\017\034\023\027\033\031\001" +
    "\002\000\020\006\026\011\030\012\032\016\044\017\034" +
    "\023\027\033\031\001\002\000\020\006\026\011\030\012" +
    "\032\016\044\017\034\023\027\033\031\001\002\000\040" +
    "\002\uffeb\005\uffeb\013\uffeb\014\uffeb\016\uffeb\017\uffeb\021" +
    "\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\001\002\000\030\002\uffef\005\uffef\021" +
    "\uffef\022\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\001\002\000\040\002\uffec\005\uffec\013" +
    "\uffec\014\uffec\016\uffec\017\uffec\021\uffec\022\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\001" +
    "\002\000\034\002\uffee\005\uffee\016\060\017\056\021\uffee" +
    "\022\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\001\002\000\014\002\ufff6\005\ufff6\021\042" +
    "\022\043\024\ufff6\001\002\000\020\006\uffdc\011\uffdc\012" +
    "\uffdc\016\uffdc\017\uffdc\023\uffdc\033\uffdc\001\002\000\020" +
    "\006\uffe1\011\uffe1\012\uffe1\016\uffe1\017\uffe1\023\uffe1\033" +
    "\uffe1\001\002\000\020\006\026\011\030\012\032\016\044" +
    "\017\034\023\027\033\031\001\002\000\020\006\uffdd\011" +
    "\uffdd\012\uffdd\016\uffdd\017\uffdd\023\uffdd\033\uffdd\001\002" +
    "\000\020\006\uffe0\011\uffe0\012\uffe0\016\uffe0\017\uffe0\023" +
    "\uffe0\033\uffe0\001\002\000\020\006\uffdf\011\uffdf\012\uffdf" +
    "\016\uffdf\017\uffdf\023\uffdf\033\uffdf\001\002\000\020\006" +
    "\uffde\011\uffde\012\uffde\016\uffde\017\uffde\023\uffde\033\uffde" +
    "\001\002\000\014\002\ufff1\005\ufff1\021\ufff1\022\ufff1\024" +
    "\ufff1\001\002\000\004\002\000\001\002\000\006\004\ufffd" +
    "\005\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\012\002\006\003\007\004\010\005\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\012\004\010\005\005\001\001\000\002\001\001" +
    "\000\006\006\014\007\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\020\007\016" +
    "\001\001\000\002\001\001\000\020\010\034\011\036\012" +
    "\040\013\022\014\024\015\037\017\032\001\001\000\004" +
    "\016\067\001\001\000\016\011\064\012\040\013\022\014" +
    "\024\015\037\017\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\052\011\036\012\040\013\022\014" +
    "\024\015\037\017\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\050\011\036\012\040" +
    "\013\022\014\024\015\037\017\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\046" +
    "\013\022\014\024\015\037\017\032\001\001\000\014\012" +
    "\044\013\022\014\024\015\037\017\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\063\015" +
    "\037\017\032\001\001\000\006\015\062\017\032\001\001" +
    "\000\012\013\061\014\024\015\037\017\032\001\001\000" +
    "\006\015\060\017\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\074" +
    "\014\024\015\037\017\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


	errores = new GestionErroresTiny();
	AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
	alex.fijaGestionErrores(errores);


    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }



	private GestionErroresTiny errores;
	public void syntax_error(Symbol unidadLexica) {
		System.out.println("ERROR");
		errores.errorSintactico((UnidadLexica)unidadLexica);
	}
	public static void main(String[] args) throws Exception {
	    Reader input = new InputStreamReader(new FileInputStream("src/pruebas/variable_no_declarada.txt"));
		AnalizadorLexicoTiny alex = new AnalizadorLexicoTiny(input);
		AnalizadorSintacticoTiny asint = new AnalizadorSintacticoTiny(alex);
		asint.parse();
		System.out.println("¡¡CORRECTO!!");
	}

	// java -jar cup.jar -expect 31 -nopositions -parser AnalizadorSintacticoTiny -symbols ClaseLexica Tiny.cup
	// java -jar cup.jar -nopositions -parser AnalizadorSintacticoTiny -symbols ClaseLexica Tiny.cup


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= D SEPARADOR I 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // D ::= D0 PUNTOYCOMA D 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("D",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // D ::= D0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("D",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // D0 ::= T NOMBREVARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("D0",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // T ::= NOMBRETIPONUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // T ::= NOMBRETIPOBOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // I ::= I0 PUNTOYCOMA I 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // I ::= I0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // I0 ::= NOMBREVARIABLE OPASIGNAR P4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("I0",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // P4 ::= OPMENOSUNARIO P4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P4",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // P4 ::= OPNOT P3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P4",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // P4 ::= P3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P4",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // P3 ::= P3 OPMUL P2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // P3 ::= P3 OPDIV P2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // P3 ::= P2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // P2 ::= P1 R P1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P2",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // P2 ::= P1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P2",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // P1 ::= P0 OPAND P1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // P1 ::= P0 OPOR P0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // P1 ::= P0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // P0 ::= P0 OPMAS F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P0",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // P0 ::= P0 OPMENOSUNARIO F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P0",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // P0 ::= F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("P0",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // F ::= PAP P4 PCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // F ::= NOMBREVARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // F ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // F ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // F ::= N 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("F",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // N ::= OPMAS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("N",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // N ::= OPMENOSUNARIO NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("N",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // N ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("N",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // R ::= OPIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // R ::= OPMENORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // R ::= OPMAYORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // R ::= OPMAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // R ::= OPMENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // R ::= OPDISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("R",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

